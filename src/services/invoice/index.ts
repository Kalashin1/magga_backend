import { ObjectId } from "mongodb";
import { AppDataSource } from "../../data-source";
import { Invoice } from "../../entity/invoice";
import draftService from "../draft";
import notificationService from "../notifications";
import userService from "../user";

export class InvoiceService {
  async create({ draft, external_id, owner, receiver }: Invoice) {
    const invoiceOwner = await userService.getUser({ _id: owner });
    const invoiceReciever = await userService.getUser({ _id: receiver });
    const existingDraft = await draftService.getDraftById(draft);

    if (!invoiceOwner) throw Error("owner of invoice not found");
    if (!invoiceReciever) throw Error("receiver of invoice was not found");
    if (!existingDraft) throw Error("Existing draft not found!");

    const invoice = AppDataSource.mongoManager.create(Invoice, {
      draft,
      external_id,
      owner,
      status: "REQUESTED",
    });

    await notificationService.create(
      "New invoice generated",
      "INVOICE",
      owner,
      invoice._id.toString()
    );
    await notificationService.create(
      `New invoiced generated by ${invoiceOwner.first_name}`,
      "INVOICE",
      receiver,
      invoice._id.toString()
    );
    return await this.save(invoice);
  }

  getOwnerInvoices(owner: string, status?: string) {
    if (status) {
      return AppDataSource.mongoManager.find(Invoice, {
        where: {
          owner: {
            $eq: owner,
          },
          status: {
            $eq: status,
          },
        },
      });
    }
    return AppDataSource.mongoManager.find(Invoice, {
      where: {
        owner: {
          $eq: owner,
        },
      },
    });
  }

  getRecieverInvoices(receiver: string, status?: string) {
    if (status) {
      return AppDataSource.mongoManager.find(Invoice, {
        where: {
          receiver: {
            $eq: receiver,
          },
          status: {
            $eq: status,
          },
        },
      });
    }
    return AppDataSource.mongoManager.find(Invoice, {
      where: {
        receiver: {
          $eq: receiver,
        },
      },
    });
  }

  getInvoiceById(invoice_id: string) {
    return AppDataSource.mongoManager.findOne(Invoice, {
      where: {
        _id: {
          $eq: new ObjectId(invoice_id),
        },
      },
    });
  }

  getInvoiceByExternalId(external_id: string){
    return AppDataSource.mongoManager.findOne(Invoice, {
      where: {
        external_id: {
          $eq: external_id,
        },
      },
    });
  }

  save(invoice: Invoice) {
    return AppDataSource.mongoManager.save(Invoice, invoice);
  }
}
